<!-- ************************************************************************ -->
<!-- This demo file is part of yFiles WPF 3.6.                           -->
<!-- Copyright (c) 2000-2024 by yWorks GmbH, Vor dem Kreuzberg 28,          -->
<!-- 72070 Tuebingen, Germany. All rights reserved.                           -->
<!--                                                                          -->
<!-- yFiles demo files exhibit yFiles WPF functionalities. Any redistribution  -->
<!-- of demo resource files, with or without modification, is not permitted.  -->
<!--                                                                          -->
<!-- Owners of a valid software license for a yFiles WPF version that this     -->
<!-- demo is shipped with are allowed to use the resource file as basis for   -->
<!-- their own yFiles WPF powered applications. Use of such programs is        -->
<!-- governed by the rights and conditions as set out in the yFiles WPF        -->
<!-- license agreement.                                                       -->
<!--                                                                          -->
<!-- THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED           -->
<!-- WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF     -->
<!-- MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN  -->
<!-- NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    -->
<!-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED -->
<!-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   -->
<!-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   -->
<!-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     -->
<!-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       -->
<!-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             -->
<!--                                                                          -->
<!-- ************************************************************************ -->
<Window x:Class="Demo.yFiles.Layout.PartialLayout.PartialLayoutDemo" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:ywpf="http://www.yworks.com/xml/yfiles-wpf/3.0/xaml"
        xmlns:option="http://www.yworks.com/yfilesWPF/3.0/demos/optionhandler"
        Title="Demo.yFiles.Layout.PartialLayout" 
        Height="600" Width="800" Loaded="OnLoaded" Style="{StaticResource DemoWindow}">
	<Window.Resources>
	</Window.Resources>
	<HeaderedContentControl Style="{StaticResource DemoStyle}">
		<HeaderedContentControl.Header>
			<RichTextBox BorderThickness="0" IsReadOnly="True">
				<FlowDocument>
					<Paragraph>
						Shows how to integrate (new) graph elements into an existing graph layout with
						<Run FontWeight="Bold">PartialLayout</Run> .
					</Paragraph>
					<Paragraph>
						This layout algorithm
						<Run FontWeight="Bold">
							changes the coordinates of a given set of graph elements
						</Run>
						(called
						<Run FontStyle="Italic">partial</Run>
						elements) and
						<Run FontWeight="Bold">
							leaves the location and size of all other elements
						</Run>
						(called
						<Run FontStyle="Italic">fixed</Run>
						elements) unchanged. The algorithm aims to place the partial elements such that the resulting drawing (including the fixed elements) has a good quality with
						respect to common graph drawing aesthetics.
					</Paragraph>
					<Paragraph>
						<Run FontWeight="Bold">
							Partial node elements
						</Run>
						can be
						<Run FontWeight="Bold">assigned to</Run>
						so called
						<Run FontWeight="Bold">subgraph components</Run>
						. During the layout process
						<Run FontWeight="Bold">each subgraph</Run>
						induced by the nodes of a component is
						<Run FontWeight="Bold">
							first laid out using the specified subgraph layout
						</Run>
						. Then, the
						<Run FontWeight="Bold">
							different
							components
						</Run>
						are
						<Run FontWeight="Bold">
							placed one-by-one onto the drawing area
						</Run>
						such that the number of overlaps among graph elements is small.
						The user can specify different objectives (placement strategies) for finding 'good' positions for subgraph components.
					</Paragraph>
					<Paragraph>
						The demo allows to specify fixed and partial elements.
						<Run FontWeight="Bold">Fixed elements</Run>
						are drawn
						<Run FontWeight="Bold">grey</Run>
						and
						<Run FontWeight="Bold">
							partial elements orange
						</Run>
						. To
						change the fixed/partial state of elements, select the corresponding elements and click on the "Lock Selected
						Elements" or "Unlock Selected Elements" button. The current state of selected elements can be toggled with a
						mouse-double-click. To start the partial layout click on the play button.
					</Paragraph>
					<Paragraph>
						Different
						<Run FontWeight="Bold">
							scenarios for hierarchic, orthogonal, organic or circular layout
						</Run>
						are available.
						A scenario includes a graph laid out in the corresponding layout style and some new graph elements that
						shall be placed by the partial layout. In addition suitable configuration options are set.
					</Paragraph>
					<Paragraph Style="{StaticResource HtmlH2}">
						Configuration Options
					</Paragraph>
					<List>
						<ListItem>
							<Paragraph>
								<Run FontWeight="Bold">Component Assignment:</Run>
								Specifies the subgraph components.
								<LineBreak />
								"Single" specifies that each partial node is assigned to a separate component (no subgraph layout is applied).
								<LineBreak />
								"Connected" specifies that all partial nodes of a connected component are assigned to the
								same subgraph component.
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								<Run FontWeight="Bold">Subgraph Layout:</Run>
								Specifies the layout algorithm that is applied to the subgraph components. Available layout
								algorithms include hierarchic, orthogonal, organic and circular layout styles.
								Furthermore it can be specified that the layout of the components shall not change by selecting "Unchanged".
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								<Run FontWeight="Bold">
									Subgraph Positioning Strategy:
								</Run>
								Specifies the placement strategy for the subgraph components.
								<LineBreak />
								"Barycenter" specifies that each component should be placed close to the barycenter of its graph neighbors.
								<LineBreak />
								"FromSketch" specifies that each component should be placed close to its original position.
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								<Run FontWeight="Bold">Edge Routing Style:</Run>
								Specifies the edge routing strategy that is used for routing partial edges and edges between
								different subgraph components (so-called inter-edges). Possible options are "Straightline", "Orthogonal" and "Organic".
								<LineBreak />
								"Automatic" specifies that the algorithm should automatically choose a suitable routing strategy.
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								<Run FontWeight="Bold">Layout Orientation:</Run>
								Specifies the layout orientation. "Automatic" specifies that the orientation should be determined
								automatically.
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								<Run FontWeight="Bold">
									Minimum Node Distance:
								</Run>
								Specifies the minimum distance between two adjacent nodes.
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								<Run FontWeight="Bold">Allow Mirroring:</Run>
								Allows mirroring of subgraph components to improve the layout quality.
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								<Run FontWeight="Bold">Node Snapping:</Run>
								If enabled, the algorithm tries to align nodes with each other.
							</Paragraph>
						</ListItem>
					</List>
				</FlowDocument>
			</RichTextBox>
		</HeaderedContentControl.Header>
		<DockPanel>
			<ToolBarTray DockPanel.Dock="Top">
				<ToolBar>
					<Button Command="IncreaseZoom" CommandTarget="{Binding ElementName=graphControl}" />
					<Button Command="DecreaseZoom" CommandTarget="{Binding ElementName=graphControl}" />
					<Button Command="{x:Static ywpf:GraphControl.FitGraphBoundsCommand}" CommandTarget="{Binding ElementName=graphControl}" />
					<Separator />
					<Button x:Name="lockSelectionButton" Click="OnLockSelectionButtonClicked" Content="Lock Selection" />
					<Button x:Name="unlockSelectionButton" Click="OnUnlockSelectionButtonClicked" Content="Unlock Selection" />
				</ToolBar>
			</ToolBarTray>
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="5" />
					<ColumnDefinition Width="300" />
				</Grid.ColumnDefinitions>
				<ywpf:GraphControl x:Name="graphControl" Grid.Column="0" />
				<GridSplitter Grid.Column="1" ResizeDirection="Columns" Width="5" Height="Auto" ResizeBehavior="PreviousAndNext" />
				<HeaderedContentControl Grid.Column="2" Style="{StaticResource DescriptionStyle}" Header="Layout Settings" BorderThickness="1,0,0,0">
					<StackPanel Orientation="Vertical">
						<StackPanel Orientation="Horizontal">
							<Label>Scenario:</Label>
							<ComboBox x:Name="scenarioComboBox" SelectionChanged="ScenarioComboBoxSelectedValueChanged" Width="120" Margin="6,0"/>
							<Button x:Name="reloadButton" Click="OnRefreshButtonClicked" ToolTip="Reload Scenario" Padding="6,2"
											Content="{StaticResource RefreshIcon}" ContentTemplate="{StaticResource ImageButtonContentTemplate}" />
						</StackPanel>
						<option:EditorControl x:Name="editorControl" Margin="0,5,0,0" />
						<DockPanel Margin="5,10,5,0">
							<Button DockPanel.Dock="Left" x:Name="runButton" Click="OnRunButtonClicked" ToolTip="Perform Layout" Padding="16,4">
								<StackPanel Orientation="Horizontal">
									<Image Source="{StaticResource PlayIcon}" Margin="0,0,4,0"/>
									<TextBlock>Layout</TextBlock>
								</StackPanel>
							</Button>
							<Label/>
						</DockPanel>
					</StackPanel>
				</HeaderedContentControl>
			</Grid>
		</DockPanel>
	</HeaderedContentControl>
</Window>