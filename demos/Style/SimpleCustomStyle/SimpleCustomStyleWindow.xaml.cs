/****************************************************************************
 ** 
 ** This demo file is part of yFiles WPF 3.5.
 ** Copyright (c) 2000-2022 by yWorks GmbH, Vor dem Kreuzberg 28,
 ** 72070 Tuebingen, Germany. All rights reserved.
 ** 
 ** yFiles demo files exhibit yFiles WPF functionalities. Any redistribution
 ** of demo files in source code or binary form, with or without
 ** modification, is not permitted.
 ** 
 ** Owners of a valid software license for a yFiles WPF version that this
 ** demo is shipped with are allowed to use the demo source code as basis
 ** for their own yFiles WPF powered applications. Use of such programs is
 ** governed by the rights and conditions as set out in the yFiles WPF
 ** license agreement.
 ** 
 ** THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
 ** WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 ** NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 ** TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 ** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 ** LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 ** NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 ** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ** 
 ***************************************************************************/

using System;
using System.Windows;
using System.Windows.Markup;
using System.Windows.Media;
using yWorks.Controls;
using yWorks.Controls.Input;
using yWorks.Geometry;
using yWorks.Graph;
using yWorks.Graph.LabelModels;
using yWorks.Utils;

[assembly: XmlnsDefinition("http://www.yworks.com/yFilesWPF/demos/SimpleCustomStyle/1.0", "Demo.yFiles.Graph.SimpleCustomStyle")]
[assembly:XmlnsPrefix("http://www.yworks.com/yFilesWPF/demos/SimpleCustomStyle/1.0", "demo")]

namespace Demo.yFiles.Graph.SimpleCustomStyle
{
  /// <summary>
  /// This demo shows how to create and use a relatively simple, non-interactive custom style
  /// for nodes, labels, edges, and ports, as well as a custom arrow.
  /// </summary>
  public partial class SimpleCustomStyleWindow
  {
    private readonly Random random = new Random();
    
    /// <summary>
    /// Automatically generated by Visual Studio.
    /// Wires up the UI components and adds a 
    /// <see cref="GraphControl"/> to the form.
    /// </summary>
    public SimpleCustomStyleWindow() {
      InitializeComponent();
    }

    /// <summary>
    /// Called upon loading of the form.
    /// This method initializes the graph and the input mode.
    /// </summary>
    /// <seealso cref="InitializeInputModes"/>
    /// <seealso cref="InitializeGraph"/>
    protected virtual void OnLoaded(object src, RoutedEventArgs e) {
      // initialize the graph
      InitializeGraph();

      // initialize the input mode
      InitializeInputModes();
    }

    /// <summary>
    /// Calls <see cref="CreateEditorMode"/> and registers
    /// the result as the <see cref="CanvasControl.InputMode"/>.
    /// </summary>
    protected virtual void InitializeInputModes() {
      graphControl.InputMode = CreateEditorMode();
   }

    /// <summary>
    /// Creates the default input mode for the GraphControl,
    /// a <see cref="GraphEditorInputMode"/>.
    /// </summary>
    /// <returns>a new GraphEditorInputMode instance</returns>
    protected virtual IInputMode CreateEditorMode() {
      GraphEditorInputMode mode = new GraphEditorInputMode();

      // We enable the live preview for moving labels
      // to show the connection between labels and the node
      // during the gesture
      mode.MoveLabelInputMode.Visualization = Visualization.Live;

      //We disable label editing, since this would be really confusing
      //together with our style.
      mode.AllowEditLabel = true;
      return mode;
    }

    /// <summary>
    /// Sets a custom NodeStyle instance as a template for newly created
    /// nodes in the graph.
    /// </summary>
    protected void InitializeGraph() {
      // Create a new style and use it as default node style
      Graph.NodeDefaults.Style = new MySimpleNodeStyle();
      // Create a new style and use it as default edge style
      Graph.EdgeDefaults.Style = new MySimpleEdgeStyle();
      Graph.EdgeDefaults.Ports.Style = new MySimplePortStyle();
      // Create a new style and use it as default label style
      Graph.NodeDefaults.Labels.Style = new MySimpleLabelStyle();
      Graph.NodeDefaults.Labels.LayoutParameter = new ExteriorLabelModel { Insets = new InsetsD(15) }.CreateParameter(ExteriorLabelModel.Position.North);
      Graph.EdgeDefaults.Labels.Style = new MySimpleLabelStyle();

      // Create a new style and use it as default port style
      Graph.NodeDefaults.Ports.Style = new MySimplePortStyle();
      Graph.NodeDefaults.Size = new SizeD(50, 50);

      // Load the initial graph
      graphControl.ImportFromGraphML("Resources\\SimpleCustomStyle.graphml");
      
    }

    /// <summary>
    /// Modifies the sharedNodeStyle instance. This will immediately affect the
    /// rendering of all selected nodes.
    /// </summary>
    protected void ModifySharedStyleButton_Click(object sender, EventArgs e) {

      // modify the tag
      foreach(INode node in graphControl.Selection.SelectedNodes) {
        node.Tag = FromHSB(random.Next(0, 255) / 255d, 1, 1, 1);
      }
      // and invalidate the view as the graph cannot know that we changed the styles
      graphControl.Invalidate();
    }

    /// <summary>
    /// Create a color from HSB values.
    /// </summary>
    public static Color FromHSB(double hue, double saturation, double brightness, double alpha) {
      int r = 0, g = 0, b = 0;
      if (saturation == 0) {
        r = g = b = (int) (brightness*255.0f + 0.5f);
      } else {
        double h = (hue - Math.Floor(hue))*6.0f;
        double f = h - Math.Floor(h);
        double p = brightness*(1.0f - saturation);
        double q = brightness*(1.0f - saturation*f);
        double t = brightness*(1.0f - (saturation*(1.0f - f)));
        switch ((int) h) {
          case 0:
            r = (int) (brightness*255.0f + 0.5f);
            g = (int) (t*255.0f + 0.5f);
            b = (int) (p*255.0f + 0.5f);
            break;
          case 1:
            r = (int) (q*255.0f + 0.5f);
            g = (int) (brightness*255.0f + 0.5f);
            b = (int) (p*255.0f + 0.5f);
            break;
          case 2:
            r = (int) (p*255.0f + 0.5f);
            g = (int) (brightness*255.0f + 0.5f);
            b = (int) (t*255.0f + 0.5f);
            break;
          case 3:
            r = (int) (p*255.0f + 0.5f);
            g = (int) (q*255.0f + 0.5f);
            b = (int) (brightness*255.0f + 0.5f);
            break;
          case 4:
            r = (int) (t*255.0f + 0.5f);
            g = (int) (p*255.0f + 0.5f);
            b = (int) (brightness*255.0f + 0.5f);
            break;
          case 5:
            r = (int) (brightness*255.0f + 0.5f);
            g = (int) (p*255.0f + 0.5f);
            b = (int) (q*255.0f + 0.5f);
            break;
        }
      }
      return Color.FromArgb(Convert.ToByte(alpha*255), Convert.ToByte(r), Convert.ToByte(g), Convert.ToByte(b));
    }

    /// <summary>
    /// Gets the currently registered IGraph instance from the GraphControl.
    /// </summary>
    public IGraph Graph {
      get { return graphControl.Graph; }
    }

  }
}
