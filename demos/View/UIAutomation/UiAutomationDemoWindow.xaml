<!-- ************************************************************************ -->
<!-- This demo file is part of yFiles WPF 3.5.                           -->
<!-- Copyright (c) 2000-2022 by yWorks GmbH, Vor dem Kreuzberg 28,          -->
<!-- 72070 Tuebingen, Germany. All rights reserved.                           -->
<!--                                                                          -->
<!-- yFiles demo files exhibit yFiles WPF functionalities. Any redistribution  -->
<!-- of demo resource files, with or without modification, is not permitted.  -->
<!--                                                                          -->
<!-- Owners of a valid software license for a yFiles WPF version that this     -->
<!-- demo is shipped with are allowed to use the resource file as basis for   -->
<!-- their own yFiles WPF powered applications. Use of such programs is        -->
<!-- governed by the rights and conditions as set out in the yFiles WPF        -->
<!-- license agreement.                                                       -->
<!--                                                                          -->
<!-- THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED           -->
<!-- WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF     -->
<!-- MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN  -->
<!-- NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    -->
<!-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED -->
<!-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   -->
<!-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   -->
<!-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     -->
<!-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       -->
<!-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             -->
<!--                                                                          -->
<!-- ************************************************************************ -->
<Window x:Class="Demo.yFiles.Graph.UIAutomation.UIAutomationDemoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:ywpf="http://www.yworks.com/xml/yfiles-wpf/3.0/xaml"
        Title="Demo.yFiles.Graph.UIAutomation" Height="757.147" Width="1123" Loaded="OnWindowLoaded" Style="{StaticResource DemoWindow}">
    <Window.Resources>
        <Style TargetType="GroupBox">
            <Setter Property="Margin" Value="2"/>
        </Style>
        <Style TargetType="Button">
            <Setter Property="Margin" Value="2"/>
        </Style>
        <Style TargetType="ComboBox">
            <Setter Property="Margin" Value="2"/>
        </Style>
    </Window.Resources>
    <Grid>
        <HeaderedContentControl Style="{StaticResource DemoStyle}">
            <HeaderedContentControl.Header>
                <RichTextBox BorderThickness="0" IsReadOnly="True">
                    <FlowDocument>
                        <Paragraph>
                            This demonstrates yFiles' support for UI Automation. The view on the right exclusively
                            uses UI Automation APIs and no yFiles APIs.
                        </Paragraph>
                        <Paragraph Style="{StaticResource HtmlH2}">
                            Things to Try
                        </Paragraph>
                        <List>
                            <ListItem>
                                <Paragraph>
                                    Create nodes, edges, and labels and see them appear in the UI Automation tree.
                                    For the purposes of this demo the tree is automatically refreshed whenever
                                    something changes in the GraphControl.
                                </Paragraph>
                            </ListItem>
                            <ListItem>
                                <Paragraph>
                                    Group nodes and observe how the group's contents are listed as children of the
                                    group in the UI Automation tree.
                                </Paragraph>
                            </ListItem>
                            <ListItem>
                                <Paragraph>
                                    Most elements implement a few automation patterns that allow you to interact with
                                    them in a limited form. Select an element in the tree to enable all patterns that
                                    the selected element implements. Most graph model items implement at least a few
                                    patterns, e.g. to control selection and visibility in the viewport. Group nodes
                                    can be collapsed and expanded.
                                </Paragraph>
                            </ListItem>
                            <ListItem>
                                <Paragraph>
                                    The visual tree of graph model items is made available below the respective
                                    elements. You can interact with the button in the blue node's template via UI
                                    Automation as well.
                                    <Run FontStyle="Italic">
                                        (Caveat: The collapse/expand ToggleButton in group nodes does not work; this
                                        is because WPF internally does not fire commands or Click event handlers when
                                        a ToggleButton is toggled via UIA; there is no Invoke pattern to explicitly
                                        invoke the command either.)
                                    </Run>
                                </Paragraph>
                            </ListItem>
                            <ListItem>
                                <Paragraph>
                                    If you add either
                                    <Run FontFamily="Consolas, Courier New">Microsoft.TestApi</Run> or
                                    <Run FontFamily="Consolas, Courier New">TestStack.White</Run> to the project and
                                    define the
                                    <Run FontFamily="Consolas, Courier New">TestApi</Run> or
                                    <Run FontFamily="Consolas, Courier New">White</Run> symbols you can also simulate
                                    drawing an edge between two nodes which uses low-level input simulation.
                                </Paragraph>
                            </ListItem>
                        </List>
                    </FlowDocument>
                </RichTextBox>
            </HeaderedContentControl.Header>
            <DockPanel>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="5"/>
                        <ColumnDefinition Width="400"/>
                    </Grid.ColumnDefinitions>
                    <DockPanel Grid.Column="0">
                        <ToolBarTray DockPanel.Dock="Top">
                            <ToolBar>
                                <Button Command="IncreaseZoom"/>
                                <Button Command="DecreaseZoom"/>
                                <Button Command="Zoom" CommandParameter="1" CommandTarget="{Binding ElementName=graphControl}" Content="{StaticResource Zoom100Icon}" ToolTip="Zoom to 100%" ContentTemplate="{StaticResource ImageButtonContentTemplate}"/>
                                <Button Command="{x:Static ywpf:GraphControl.FitGraphBoundsCommand}" CommandTarget="{Binding ElementName=graphControl}"/>
                                <Separator />
                                <Button Command="{x:Static ywpf:GraphCommands.GroupSelection}" CommandTarget="{Binding ElementName=graphControl}"/>
                                <Button Command="{x:Static ywpf:GraphCommands.UngroupSelection}" CommandTarget="{Binding ElementName=graphControl}"/>
                            </ToolBar>
                        </ToolBarTray>
                        <Grid>
                            <ywpf:GraphControl x:Name="graphControl" Background="White" AutomationProperties.AutomationId="DemoGraphControl" ViewportChanged="OnGraphControlViewportChanged"/>
                            <Canvas x:Name="overlayContainer" Panel.ZIndex="1000" IsHitTestVisible="False" Visibility="Collapsed" ClipToBounds="True">
                                <Rectangle x:Name="overlay" Fill="#7EFF0000" Stroke="Blue" StrokeThickness="3"/>
                            </Canvas>
                        </Grid>
                    </DockPanel>
                    <GridSplitter Grid.Column="1" ResizeDirection="Columns" Width="5" Height="Auto" ResizeBehavior="PreviousAndNext"/>
                    <Grid Grid.Column="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="5"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ToolBarTray Grid.Row="0">
                            <ToolBar>
                                <Button Click="OnRefreshTreeClicked">Refresh tree</Button>
                            </ToolBar>
                        </ToolBarTray>

                        <HeaderedContentControl Grid.Row="1" Header="UI Automation tree" Style="{StaticResource DescriptionStyle}">
                            <TreeView x:Name="uiaTree" BorderThickness="0" SelectedItemChanged="OnSelectedItemChanged">
                              <TreeView.Template>
                                <ControlTemplate>
                                  <ItemsPresenter/>
                                </ControlTemplate>
                              </TreeView.Template>
                            </TreeView>
                        </HeaderedContentControl>

                        <GridSplitter Grid.Row="2" ResizeDirection="Rows" Width="Auto" Height="5" ResizeBehavior="PreviousAndNext" HorizontalAlignment="Stretch"/>

                        <StackPanel Grid.Row="3">
                            <HeaderedContentControl Header="Patterns" Style="{StaticResource DescriptionStyle}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <GroupBox Header="Selection" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="6">
                                        <StackPanel>
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <StackPanel Orientation="Horizontal" Grid.Column="0" Grid.Row="0">
                                                    <Label Margin="0,0,5,0">Current selection:</Label>
                                                    <Label x:Name="lbCurrentSelection"/>
                                                </StackPanel>
                                                <Button Click="OnRefreshSelectionClicked" Grid.Column="1" Grid.Row="0">Refresh</Button>
                                            </Grid>
                                            <Grid x:Name="pnlSelectionItem">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition/>
                                                    <ColumnDefinition/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <Button Grid.Row="0" Grid.Column="0" x:Name="btSelect" Click="OnSelectClicked">Select</Button>
                                                <Button Grid.Row="0" Grid.Column="1" x:Name="btAddToSelection" Click="OnAddToSelectionClicked">Add to selection</Button>
                                                <Button Grid.Row="0" Grid.Column="2" x:Name="btRemoveFromSelection" Content="Remove from selection" Click="OnRemoveFromSelectionClicked"/>
                                            </Grid>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox x:Name="grpToggle" Header="Toggle" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3">
                                        <StackPanel>
                                            <StackPanel Orientation="Horizontal">
                                                <Label Margin="0,0,5,0">Current value:</Label>
                                                <Label x:Name="lbCurrentToggleValue"/>
                                            </StackPanel>
                                            <Button Click="OnToggleClicked">Toggle</Button>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox x:Name="grpExpandCollapse" Header="Expand / Collapse" Grid.Row="1" Grid.Column="3" Grid.ColumnSpan="3">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>
                                            <StackPanel Orientation="Horizontal" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                                                <Label Margin="0,0,5,0">Current value:</Label>
                                                <Label x:Name="lbCurrentExpandValue"/>
                                            </StackPanel>
                                            <Button Grid.Row="1" Grid.Column="0" Click="OnCollapseClicked">Collapse</Button>
                                            <Button Grid.Row="1" Grid.Column="1" Click="OnExpandClicked">Expand</Button>
                                        </Grid>
                                    </GroupBox>
                                    <GroupBox x:Name="grpInvoke" Header="Invoke" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2">
                                        <Button Click="OnInvokeClicked">Invoke</Button>
                                    </GroupBox>
                                    <GroupBox x:Name="grpValue" Header="Value" Grid.Row="2" Grid.Column="2" Grid.ColumnSpan="2">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox x:Name="tbCurrentValue" Grid.Row="0" Grid.Column="0" Margin="2"/>
                                            <Button x:Name="btnSetValue" Grid.Row="0" Grid.Column="1" Click="OnSetValueClicked" Content="Set"/>
                                        </Grid>
                                    </GroupBox>
                                    <GroupBox x:Name="grpScrollItem" Header="ScrollItem" Grid.Row="2" Grid.Column="4" Grid.ColumnSpan="2">
                                        <Button Click="OnScrollIntoViewClicked">Scroll into view</Button>
                                    </GroupBox>
                                </Grid>
                            </HeaderedContentControl>
                            <HeaderedContentControl Header="Simulated Interaction" Style="{StaticResource DescriptionStyle}" x:Name="selectionItem">
                                <StackPanel>
                                    <RichTextBox BorderThickness="0" IsReadOnly="True" x:Name="rtbInteractionHint">
                                        <FlowDocument>
                                            <Paragraph>
                                                To enable the simulated interaction demonstration, please add either
                                                <Run FontFamily="Consolas, Courier New">Microsoft.TestApi</Run> or
                                                <Run FontFamily="Consolas, Courier New">TestStack.White</Run> to the
                                                project (e.g. via Nuget's
                                                <Run FontFamily="Consolas, Courier New">Install-Package</Run>) and
                                                set either the
                                                <Run FontFamily="Consolas, Courier New">TestApi</Run> or
                                                <Run FontFamily="Consolas, Courier New">White</Run> symbols in the
                                                <Run FontStyle="Italic">Build</Run> tab of the project settings.
                                            </Paragraph>
                                        </FlowDocument>
                                    </RichTextBox>
                                    <GroupBox Header="Draw edge" x:Name="grpDrawEdge">
                                        <Grid Margin="2">
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>
                                            <Label Grid.Row="0" Grid.Column="0" HorizontalAlignment="Right">Source node:</Label>
                                            <Label Grid.Row="1" Grid.Column="0" HorizontalAlignment="Right">Target node:</Label>
                                            <ComboBox x:Name="fromNode" Grid.Row="0" Grid.Column="1" HorizontalAlignment="Stretch" DisplayMemberPath="Item1" SelectedValuePath="Item2"/>
                                            <ComboBox x:Name="toNode" Grid.Row="1" Grid.Column="1" HorizontalAlignment="Stretch" DisplayMemberPath="Item1" SelectedValuePath="Item2"/>
                                            <Button Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" x:Name="drawEdgeButton" Click="OnDrawEdgeClicked">Draw edge</Button>
                                        </Grid>
                                    </GroupBox>
                                </StackPanel>
                            </HeaderedContentControl>
                        </StackPanel>
                    </Grid>
                </Grid>
            </DockPanel>
        </HeaderedContentControl>
    </Grid>
</Window>