<!-- ************************************************************************ -->
<!-- This demo file is part of yFiles WPF 3.6.                           -->
<!-- Copyright (c) 2000-2024 by yWorks GmbH, Vor dem Kreuzberg 28,          -->
<!-- 72070 Tuebingen, Germany. All rights reserved.                           -->
<!--                                                                          -->
<!-- yFiles demo files exhibit yFiles WPF functionalities. Any redistribution  -->
<!-- of demo resource files, with or without modification, is not permitted.  -->
<!--                                                                          -->
<!-- Owners of a valid software license for a yFiles WPF version that this     -->
<!-- demo is shipped with are allowed to use the resource file as basis for   -->
<!-- their own yFiles WPF powered applications. Use of such programs is        -->
<!-- governed by the rights and conditions as set out in the yFiles WPF        -->
<!-- license agreement.                                                       -->
<!--                                                                          -->
<!-- THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED           -->
<!-- WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF     -->
<!-- MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN  -->
<!-- NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    -->
<!-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED -->
<!-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   -->
<!-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   -->
<!-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     -->
<!-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       -->
<!-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             -->
<!--                                                                          -->
<!-- ************************************************************************ -->
<Window x:Class="Demo.yFiles.DataBinding.DataSetBinding.DataSetBindingWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:ywpf="http://www.yworks.com/xml/yfiles-wpf/3.0/xaml"
        xmlns:DataSetBindingDemo="clr-namespace:Demo.yFiles.DataBinding.DataSetBinding"
        x:Name="window"
        Title="AdventureWorks Employees, Data Binding with a DataSet"
        Width="1280" Height="850"
        Loaded="Window_Loaded"
        Style="{StaticResource DemoWindow}">
    
    <Window.Resources>
        <!-- The EmployeeRepository constructs the DataSet from the resources and provides the business objects-->
        <!-- to be represented as the nodes of the diagram. The NodesSource property of the repository is -->
        <!-- with a data view onto the Contact table in the underlying DataSet (see code behind in -->
        <!-- DataSetBindingWindow.xaml.cs). -->
        <DataSetBindingDemo:EmployeeRepository x:Key="employeeRepository"/>
        
        <!-- This is an object which is used by the tree source in order to decide whether two business objects --> 
        <!-- are equal which are sources for nodes in the diagram. -->
        <DataSetBindingDemo:ContactComparer x:Key="contactComparer"/>
        
        <!-- This converter is used by the tree source. See below. -->
        <DataSetBindingDemo:EmployeeContactConverter x:Key="EmployeeContactConverter"/>
        
        <!-- This is the style for the employee nodes. -->
        <!-- We display information from two tables in the underlying dataset, namely the Contact and the Employee table. -->
        <!-- We use the Contact table as the "main" source for the employees and the Contact_Employee relation to access -->
        <!-- further data in the corresponding Employee row (the Title).-->
        <Style x:Key="EmployeeTemplate" TargetType="ywpf:NodeControl">
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <Border BorderBrush="#27401b" Background="#61a044" Padding="3" BorderThickness="1" CornerRadius="5">
                            <StackPanel Orientation="Vertical">
                                <StackPanel Orientation="Horizontal">
                                    <!-- This is data from a row in the Contact table. -->
                                    <TextBlock Text="{Binding Path=FirstName}" Foreground="#27401b" Padding="0,0,3,0"/>
                                    <TextBlock Text="{Binding Path=MiddleName}" Foreground="#27401b" Padding="0,0,3,0"/>
                                    <TextBlock Text="{Binding Path=LastName}" Foreground="#27401b" />
                                </StackPanel>
                                <!-- The title is stored in the corresponding Employee row. -->
                                <TextBlock Text="{Binding Path=Contact_Employee/Title}" Foreground="#27401b"/>
                            </StackPanel>
                        </Border>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- The tree source constructs a tree Graph from suitable business objects. Set the NodesSource -->
        <!-- property to the business objects which should be represented as nodes in the resulting tree. -->
        <!-- In this example the node sources are provided by the EmployeeRepository. -->
        <!-- The ChildBinding is used by the tree source to get the child business objects of a parent business -->
        <!-- object. The child business objects are represented by child nodes of the node representing the -->
        <!-- parent business object in the resulting tree. In this example we navigate from a contact to the -->
        <!-- corresponding employee using Contact_Employee relation and then to its reports using the -->
        <!-- Employee_Employee relation. Since the result is a set of rows from the Employee table we convert -->
        <!-- them to the corresponding contact rows using a converter. -->
        <ywpf:TreeSource x:Key="treeSource"
                         NodesSource="{Binding Source={StaticResource employeeRepository}, Path=NodesSource}"
                         NodeSourceComparer="{StaticResource contactComparer}"
                         ChildBinding="{Binding Path=Contact_Employee/Employee_Employee, Converter={StaticResource EmployeeContactConverter}}"
                         NodeControlStyle="{StaticResource EmployeeTemplate}">
            <ywpf:TreeSource.EdgeStyle>
                <ywpf:PolylineEdgeStyle/>
            </ywpf:TreeSource.EdgeStyle>
        </ywpf:TreeSource>
    </Window.Resources>
    <HeaderedContentControl Style="{StaticResource DemoStyle}">
        <HeaderedContentControl.Header>
            <RichTextBox BorderThickness="0" IsReadOnly="True">
                <FlowDocument>
                    <Paragraph>
                        <Run>
                            This Demo shows how to use a
                        </Run>
                        <Run FontStyle="Italic" Text="TreeSource"/>
                        <Run>
                            for data binding with a
                        </Run>
                        <Run FontStyle="Italic" Text="DataSet."/>
                        <Run>
                            See the XAML file and the code behind for details.
                        </Run>
                    </Paragraph>
                </FlowDocument>
            </RichTextBox>
        </HeaderedContentControl.Header>
        <DockPanel>
            <ToolBarTray Height="Auto" Name="toolBarTray" Width="Auto" DockPanel.Dock="Top">
                <ToolBar Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBarTray}}}" DockPanel.Dock="Top" Height="30">
                    <Button Command="IncreaseZoom" CommandTarget="{Binding ElementName=graphControl}"/>
                    <Button Command="DecreaseZoom"  CommandTarget="{Binding ElementName=graphControl}"/>
                    <!-- The "Fit Contents" button triggers a new layout since the used layout does take -->
                    <!-- the aspect ratio of the graph control into account. Thus after resizing the window -->
                    <!-- you can adapt the graph to the new aspect ratio by using the "Fit Contents" button. -->
                    <!-- The layout is configured in the code behind. It is an instance of AspectRatioTreeLayout. -->
                    <Button ToolTip="Fit Contents"
                            Command="{x:Static DataSetBindingDemo:DataSetBindingWindow.LayoutCommand}"
                            CommandTarget="{Binding ElementName=graphControl}" ContentTemplate="{StaticResource ImageButtonContentTemplate}" Content="{StaticResource FitContentIcon}"/>
                </ToolBar>
            </ToolBarTray>
            <!-- The graph control displays the graph constructed by the TreeSource. -->
            <ywpf:GraphControl x:Name="graphControl"
                           Graph="{Binding Source={StaticResource treeSource}, Path=Graph}">
                <ywpf:GraphControl.InputMode>
                    <ywpf:MoveViewportInputMode/>
                </ywpf:GraphControl.InputMode>
            </ywpf:GraphControl>
        </DockPanel>
    </HeaderedContentControl>
</Window>
