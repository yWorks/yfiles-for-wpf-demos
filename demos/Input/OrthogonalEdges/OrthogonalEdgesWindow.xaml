<!-- ************************************************************************ -->
<!-- This demo file is part of yFiles WPF 3.5.                           -->
<!-- Copyright (c) 2000-2022 by yWorks GmbH, Vor dem Kreuzberg 28,          -->
<!-- 72070 Tuebingen, Germany. All rights reserved.                           -->
<!--                                                                          -->
<!-- yFiles demo files exhibit yFiles WPF functionalities. Any redistribution  -->
<!-- of demo resource files, with or without modification, is not permitted.  -->
<!--                                                                          -->
<!-- Owners of a valid software license for a yFiles WPF version that this     -->
<!-- demo is shipped with are allowed to use the resource file as basis for   -->
<!-- their own yFiles WPF powered applications. Use of such programs is        -->
<!-- governed by the rights and conditions as set out in the yFiles WPF        -->
<!-- license agreement.                                                       -->
<!--                                                                          -->
<!-- THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED           -->
<!-- WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF     -->
<!-- MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN  -->
<!-- NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    -->
<!-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED -->
<!-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   -->
<!-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   -->
<!-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     -->
<!-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       -->
<!-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             -->
<!--                                                                          -->
<!-- ************************************************************************ -->
<Window x:Class="Demo.yFiles.Graph.Input.OrthogonalEdges.OrthogonalEdgesWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ywpf="http://www.yworks.com/xml/yfiles-wpf/3.0/xaml"
    Title="Demo.yFiles.Graph.Input.OrthogonalEdges" Height="500" Width="800" Style="{StaticResource DemoWindow}" Loaded="OnWindowLoaded" >
    <HeaderedContentControl Style="{StaticResource DemoStyle}">
        <HeaderedContentControl.Header>
            <RichTextBox BorderThickness="0" IsReadOnly="True">
                <FlowDocument>
                    <Paragraph>
                        <Run>
                            This demo shows the customization of orthogonal edge editing.
                        </Run>
                    </Paragraph>
                    <Paragraph>
                        <Run>This can be done with custom implementations of the</Run>
                        <Run FontStyle="Italic" Text="IOrthogonalEdgeHelper"/>
                        <Run>interface. These have to be added to the</Run>
                        <Run FontStyle="Italic" Text="LookupChain"/>
                        <Run>of the edges in the graph via the</Run>
                        <Run FontStyle="Italic" Text="ILookupDecorator"/>
                        <Run>mechanism.</Run>
                    </Paragraph>
                    <Paragraph Style="{StaticResource HtmlH2}">
                        Things to Try
                    </Paragraph>
                    <List>
                        <ListItem>
                            <Paragraph>Drag segments and bends of the edges and observe the different characteristics.</Paragraph>
                        </ListItem>
                    </List>
                    <Paragraph Style="{StaticResource HtmlH2}">
                        Edge Types
                    </Paragraph>
                    <List>
                        <ListItem>
                            <Paragraph>
                                <Run FontWeight="Bold" Foreground="{StaticResource DemoRed}">Red Edge</Run>: Orthogonal edge editing is disabled. The segments are
                                straight lines with arbitrary slope. Dragging an unselected segment creates a new bend.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                <Run FontWeight="Bold" Foreground="{StaticResource DemoGreen}">Green Edge</Run>: Orthogonal edge editing is enabled. While dragging, all
                                segments stay orthogonal and new bends are created as needed.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                <Run FontWeight="Bold" Foreground="{StaticResource DemoPurple}">Purple Edge</Run>: Same behavior as the green edge. In addition, the
                                locations of the source port and target port are constraint to the given port candidates of the nodes.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                <Run FontWeight="Bold" Foreground="{StaticResource DemoOrange}">Orange Edge</Run>: Same behavior as the green edge. In addition, the
                                source port and the target port can be placed at any location inside the node since they use dynamic port
                                candidates.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                <Run FontWeight="Bold" Foreground="{StaticResource DemoLightblue}">Blue Edge</Run>: Orthogonal edge editing is enabled for the inner segments
                                but the first and the last segment can have an arbitrary slope. If a new bend is added to one of these two
                                segments, the newly created inner segment becomes orthogonal immediately.
                            </Paragraph>
                        </ListItem>
                    </List>
                </FlowDocument>
            </RichTextBox>
        </HeaderedContentControl.Header>
        <ywpf:GraphControl Name="graphControl" />
    </HeaderedContentControl>
</Window>
