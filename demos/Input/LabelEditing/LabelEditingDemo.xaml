<!-- ************************************************************************ -->
<!-- This demo file is part of yFiles WPF 3.6.                           -->
<!-- Copyright (c) 2000-2024 by yWorks GmbH, Vor dem Kreuzberg 28,          -->
<!-- 72070 Tuebingen, Germany. All rights reserved.                           -->
<!--                                                                          -->
<!-- yFiles demo files exhibit yFiles WPF functionalities. Any redistribution  -->
<!-- of demo resource files, with or without modification, is not permitted.  -->
<!--                                                                          -->
<!-- Owners of a valid software license for a yFiles WPF version that this     -->
<!-- demo is shipped with are allowed to use the resource file as basis for   -->
<!-- their own yFiles WPF powered applications. Use of such programs is        -->
<!-- governed by the rights and conditions as set out in the yFiles WPF        -->
<!-- license agreement.                                                       -->
<!--                                                                          -->
<!-- THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED           -->
<!-- WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF     -->
<!-- MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN  -->
<!-- NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    -->
<!-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED -->
<!-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   -->
<!-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   -->
<!-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     -->
<!-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       -->
<!-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             -->
<!--                                                                          -->
<!-- ************************************************************************ -->
<Window x:Class="Demo.yFiles.Graph.Input.LabelEditing.LabelEditingDemo"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:ywpf="http://www.yworks.com/xml/yfiles-wpf/3.0/xaml"
        xmlns:option="http://www.yworks.com/yfilesWPF/3.0/demos/optionhandler"
        Title="Demo.yFiles.Graph.Input.LabelEditing" Height="600" Width="900" Loaded="OnLoaded"
        Style="{StaticResource DemoWindow}">
	<HeaderedContentControl Style="{StaticResource DemoStyle}">
        <HeaderedContentControl.Resources>
            <GridLength x:Key="HeaderContentWidth">350</GridLength>
        </HeaderedContentControl.Resources>
		<HeaderedContentControl.Header>
			<RichTextBox BorderThickness="0" IsReadOnly="True">
				<FlowDocument>
					<Paragraph>
						This demo shows customizations of the interactive label editing. In particular, it shows
					</Paragraph>
					<List>
						<ListItem>
							<Paragraph>
								The related properties of
                <Run Style="{StaticResource HtmlCode}">GraphEditorInputMode</Run>
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								An <Run Style="{StaticResource HtmlCode}">IEditLabelHelper</Run>
								that customizes label editing for individual labels and label owners
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								Input validation
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								Creating and editing a label that is not owned by any graph item
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								The Instant Typing feature that allows users to start typing immediately
							</Paragraph>
						</ListItem>
					</List>

					<Paragraph Style="{StaticResource HtmlH2}">
						Things to Try
					</Paragraph>

					<List>
						<ListItem>
							<Paragraph>
								Edit a selected label by pressing <Run Style="{StaticResource HtmlCode}">F2</Run>.
								If no label exists, a new one will be added.
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								Add an additional label to a selected graph item by pressing
								<Run Style="{StaticResource HtmlCode}">Shift+F2</Run>.
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								Select multiple items (labels and/or label owners) and try to add or edit them by pressing
								<Run Style="{StaticResource HtmlCode}">Shift+F2</Run> or
								<Run Style="{StaticResource HtmlCode}">F2</Run>, resp. Note that by default, if both labels and other
								items are selected, editing a label is preferred.
							</Paragraph>
						</ListItem>
						<ListItem>
							<Paragraph>
								Click the "Edit Page Header" button to edit the "Page Header" label. The new label text may not be
								empty. Note that this label has a fixed size and a fixed position in the upper left corner.
							</Paragraph>
						</ListItem>
  				</List>

					<Paragraph Style="{StaticResource HtmlH2}">
						Editing Properties
					</Paragraph>

					<Paragraph Style="{StaticResource HtmlDt}">
						Adding Labels, Editing Labels
					</Paragraph>
					<Paragraph Style="{StaticResource HtmlDi}">
						Specifies whether adding and editing of labels is allowed.
					</Paragraph>

					<Paragraph Style="{StaticResource HtmlDt}">
						Hide Label During Editing
					</Paragraph>
					<Paragraph Style="{StaticResource HtmlDi}">
						Specifies whether the label is hidden while the label editor text box is displayed.
					</Paragraph>

					<Paragraph Style="{StaticResource HtmlDt}">
						Instant Typing
					</Paragraph>
					<Paragraph Style="{StaticResource HtmlDi}">
						If enabled, label text editing starts automatically when typing, without the need for starting it
						explicitly.
					</Paragraph>

					<Paragraph Style="{StaticResource HtmlDt}">
						Custom Label Helper
					</Paragraph>
					<Paragraph Style="{StaticResource HtmlDi}">
							Enables a custom
							<Run Style="{StaticResource HtmlCode}">IEditLabelHelper</Run>
							for node labels. This helper has the following features:
            </Paragraph>
            <List>
							<ListItem>
								<Paragraph>
									Each node can have at most two labels.
								</Paragraph>
							</ListItem>
							<ListItem>
								<Paragraph>
									The first label gets a special style and is placed on top of the node. In addition, it cannot be
									edited once it was created. Instead, a second label is created.
								</Paragraph>
							</ListItem>
							<ListItem>
								<Paragraph>
									The editing text box has a different background.
								</Paragraph>
							</ListItem>
						</List>

					<Paragraph Style="{StaticResource HtmlDt}">
						Editable Items
					</Paragraph>
					<Paragraph Style="{StaticResource HtmlDi}">
						Specifies whether changing labels of nodes and edges is allowed.
					</Paragraph>

					<Paragraph Style="{StaticResource HtmlDt}">
						Validation
					</Paragraph>
					<Paragraph Style="{StaticResource HtmlDi}">
						Specifies whether new label texts are validated against the regular expression in the Pattern field.
						The default pattern does a simple email address verification.
					</Paragraph>

				</FlowDocument>
			</RichTextBox>
		</HeaderedContentControl.Header>
		<DockPanel>
			<Menu Name="menu" DockPanel.Dock="Top">
				<MenuItem Header="File">
					<MenuItem Header="Exit" Click="ExitAction" />
				</MenuItem>
				<MenuItem Header="View">
					<MenuItem Command="IncreaseZoom" CommandTarget="{Binding ElementName=graphControl}" />
					<MenuItem Command="DecreaseZoom" CommandTarget="{Binding ElementName=graphControl}" />
					<MenuItem Command="{x:Static ywpf:GraphControl.FitGraphBoundsCommand}" CommandTarget="{Binding ElementName=graphControl}" />
				</MenuItem>
			</Menu>
			<ToolBarTray Height="Auto" Name="toolBarTray" Width="Auto" DockPanel.Dock="Top">
				<ToolBar Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBarTray}}}" Height="Auto" Name="toolBar">
					<Button Command="IncreaseZoom" CommandTarget="{Binding ElementName=graphControl}" />
					<Button Command="DecreaseZoom" CommandTarget="{Binding ElementName=graphControl}" />
					<Button Command="{x:Static ywpf:GraphControl.FitGraphBoundsCommand}" CommandTarget="{Binding ElementName=graphControl}" />
					<Separator />
					<Button Content="Edit Page Header" Click="EditPageHeader" />
				</ToolBar>
			</ToolBarTray>
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="5" />
					<ColumnDefinition Width="300" />
				</Grid.ColumnDefinitions>
				<ywpf:GraphControl Name="graphControl" Grid.Column="0" />
				<GridSplitter Grid.Column="1" Width="5" ResizeBehavior="PreviousAndNext" />
				<DockPanel Grid.Column="2" Width="Auto">
					<ScrollViewer VerticalScrollBarVisibility="Auto">
						<StackPanel>
							<TextBlock Style="{StaticResource HeaderTemplateStyle}">
								Label Editing Properties
							</TextBlock>
							<option:EditorControl x:Name="editorControl">
								<option:EditorControl.Resources>
									<option:XamlLocalizingConverter x:Key="ItemNameLocalizer" />
									<Style x:Key="AccordionItemStyle" TargetType="Expander">
										<Setter Property="Margin" Value="0,0,0,2" />
										<Setter Property="Padding" Value="0" />
										<Setter Property="IsExpanded" Value="true" />
										<Setter Property="HeaderTemplate" Value="{StaticResource AccordionHeaderContentTemplate}" />
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="Expander">
													<Grid HorizontalAlignment="Stretch">
														<Grid.RowDefinitions>
															<RowDefinition Height="Auto" />
															<RowDefinition Height="Auto" />
														</Grid.RowDefinitions>
														<ToggleButton x:Name="HeaderSite" Padding="0" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
															<ToggleButton.Template>
																<ControlTemplate TargetType="ToggleButton">
																	<Grid Margin="{TemplateBinding Padding}" Background="Transparent">
																		<Border x:Name="background" Background="{StaticResource SecondaryBrush}">
																			<Grid>
																				<Grid Background="Transparent">
																					<Grid.ColumnDefinitions>
																						<ColumnDefinition Width="Auto" x:Name="cd0" />
																						<ColumnDefinition Width="Auto" x:Name="cd1" />
																					</Grid.ColumnDefinitions>
																					<Grid.RowDefinitions>
																						<RowDefinition Height="Auto" x:Name="rd0" />
																						<RowDefinition Height="Auto" x:Name="rd1" />
																					</Grid.RowDefinitions>
																					<Grid Height="19" HorizontalAlignment="Center" x:Name="icon" VerticalAlignment="Center" Width="19" RenderTransformOrigin="0.5,0.5" Grid.Column="0" Grid.Row="0">
																						<Grid.RenderTransform>
																							<TransformGroup>
																								<ScaleTransform />
																								<SkewTransform />
																								<RotateTransform Angle="-90" />
																								<TranslateTransform />
																							</TransformGroup>
																						</Grid.RenderTransform>
																						<Path Height="Auto" HorizontalAlignment="Center" Margin="0,0,0,0" x:Name="arrow" VerticalAlignment="Center" Width="Auto" RenderTransformOrigin="0.5,0.5" Stroke="#666" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 L 8,1.5">
																							<Path.RenderTransform>
																								<TransformGroup>
																									<ScaleTransform />
																									<SkewTransform />
																									<RotateTransform Angle="90" />
																									<TranslateTransform />
																								</TransformGroup>
																							</Path.RenderTransform>
																						</Path>
																					</Grid>
																					<ContentControl Grid.Column="1" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
																				</Grid>
																			</Grid>
																		</Border>
																		<Rectangle x:Name="FocusVisualElement" IsHitTestVisible="false" Visibility="Collapsed" Stroke="DarkGray" StrokeThickness="1" />
																	</Grid>
																	<ControlTemplate.Triggers>
																		<Trigger Property="IsMouseOver" Value="True">
																			<Setter TargetName="arrow" Property="Stroke" Value="Black" />
																		</Trigger>
																		<Trigger Property="IsFocused" Value="True">
																			<Setter TargetName="FocusVisualElement" Property="Visibility" Value="Visible" />
																		</Trigger>
																		<Trigger Property="IsChecked" Value="false">
																			<Trigger.EnterActions>
																				<BeginStoryboard>
																					<Storyboard>
																						<DoubleAnimation BeginTime="00:00:00" Duration="00:00:00.3" Storyboard.TargetName="icon" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" To="-180" />
																					</Storyboard>
																				</BeginStoryboard>
																			</Trigger.EnterActions>
																			<Trigger.ExitActions>
																				<BeginStoryboard>
																					<Storyboard>
																						<DoubleAnimation BeginTime="00:00:00" Duration="00:00:00.3" Storyboard.TargetName="icon" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" To="-90" />
																					</Storyboard>
																				</BeginStoryboard>
																			</Trigger.ExitActions>
																		</Trigger>
																	</ControlTemplate.Triggers>
																</ControlTemplate>
															</ToggleButton.Template>
														</ToggleButton>
														<ContentControl x:Name="ExpandSite" Visibility="Collapsed" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
													</Grid>
													<ControlTemplate.Triggers>
														<Trigger Property="IsExpanded" Value="true">
															<Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
									<Style x:Key="OptionGroupPresenter" TargetType="option:OptionItemPresenter">
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="option:OptionItemPresenter">
													<ItemsControl ItemsSource="{TemplateBinding ChildItems}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch">
														<ItemsControl.ItemsPanel>
															<ItemsPanelTemplate>
																<StackPanel HorizontalAlignment="Stretch" Orientation="Vertical" />
															</ItemsPanelTemplate>
														</ItemsControl.ItemsPanel>
														<ItemsControl.ItemTemplate>
															<DataTemplate>
																<Expander Style="{StaticResource AccordionItemStyle}" ExpandDirection="Down" Header="{Binding Converter={StaticResource ItemNameLocalizer}, Mode=OneWay}" Content="{Binding}" IsExpanded="true" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch">
																	<Expander.ContentTemplate>
																		<DataTemplate>
																			<option:OptionItemPresenter Item="{Binding}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" />
																		</DataTemplate>
																	</Expander.ContentTemplate>
																</Expander>
															</DataTemplate>
														</ItemsControl.ItemTemplate>
													</ItemsControl>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
									<Style x:Key="OptionGroup.Level1.OptionItemPresenter" TargetType="option:OptionItemPresenter" BasedOn="{StaticResource OptionGroupPresenter}" />
									<Style x:Key="System.String.OptionItemPresenter" TargetType="option:OptionItemPresenter">
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="option:OptionItemPresenter">
													<option:RowPanel KeyboardNavigation.IsTabStop="false">
														<TextBlock KeyboardNavigation.IsTabStop="false" Grid.Column="0" VerticalAlignment="Center" Margin="0,0,4,0" Text="{Binding Path=Item, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ItemNameLocalizer}, Mode=OneWay}" />
														<Border x:Name="border" BorderThickness="1" Grid.Column="1">
															<Border.Background>
																<SolidColorBrush x:Name="borderBackground" Color="Transparent" />
															</Border.Background>
															<Border.BorderBrush>
																<SolidColorBrush x:Name="borderBrush" Color="Transparent" />
															</Border.BorderBrush>
															<StackPanel Orientation="Vertical">
																<ContentControl IsEnabled="{TemplateBinding ItemEnabled}" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Value, Mode=TwoWay, NotifyOnValidationError=True, ValidatesOnExceptions=True}" KeyboardNavigation.IsTabStop="false" Template="{TemplateBinding EditorTemplate}" />
																<Popup x:Name="errorPopup" IsOpen="false">
																	<Border BorderBrush="Red" BorderThickness="1" Background="{DynamicResource ResourceKey={x:Static SystemColors.ControlBrushKey}}">
																		<ContentPresenter Content="{TemplateBinding ErrorContent}" Margin="4" HorizontalAlignment="Stretch" />
																	</Border>
																</Popup>
															</StackPanel>
														</Border>
													</option:RowPanel>
													<ControlTemplate.Triggers>
														<Trigger Property="IsUndefined" Value="true">
															<Setter TargetName="border" Property="Background" Value="DarkGray" />
														</Trigger>
														<Trigger Property="ValueState" Value="Invalid">
															<Setter TargetName="errorPopup" Property="IsOpen" Value="true" />
															<Setter TargetName="border" Property="BorderBrush" Value="Red" />
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
										<Setter Property="EditorTemplate">
											<Setter.Value>
												<ControlTemplate TargetType="ContentControl">
													<option:TextBoxContainer HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinWidth="80">
														<TextBox HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled" AcceptsReturn="False" MinLines="1" MaxLines="1" IsEnabled="{TemplateBinding IsEnabled}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content, Mode=TwoWay}" />
													</option:TextBoxContainer>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</option:EditorControl.Resources>
							</option:EditorControl>
						</StackPanel>
					</ScrollViewer>
				</DockPanel>
			</Grid>
		</DockPanel>
	</HeaderedContentControl>
</Window>















