<!-- ************************************************************************ -->
<!-- This demo file is part of yFiles WPF 3.6.                           -->
<!-- Copyright (c) 2000-2024 by yWorks GmbH, Vor dem Kreuzberg 28,          -->
<!-- 72070 Tuebingen, Germany. All rights reserved.                           -->
<!--                                                                          -->
<!-- yFiles demo files exhibit yFiles WPF functionalities. Any redistribution  -->
<!-- of demo resource files, with or without modification, is not permitted.  -->
<!--                                                                          -->
<!-- Owners of a valid software license for a yFiles WPF version that this     -->
<!-- demo is shipped with are allowed to use the resource file as basis for   -->
<!-- their own yFiles WPF powered applications. Use of such programs is        -->
<!-- governed by the rights and conditions as set out in the yFiles WPF        -->
<!-- license agreement.                                                       -->
<!--                                                                          -->
<!-- THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED           -->
<!-- WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF     -->
<!-- MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN  -->
<!-- NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    -->
<!-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED -->
<!-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   -->
<!-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   -->
<!-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     -->
<!-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       -->
<!-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             -->
<!--                                                                          -->
<!-- ************************************************************************ -->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ywpf="http://www.yworks.com/xml/yfiles-wpf/3.0/xaml"
                    xmlns:networkMonitoring="clr-namespace:Demo.yFiles.Graph.NetworkMonitoring"
                    xmlns:model="clr-namespace:Demo.yFiles.Graph.NetworkMonitoring.Model">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Icons.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Style for the nodes. This includes the icon showing the type as well as an exclamation mark icon if the node is broken.
         The latter one can be clicked to repair the node as well. -->
    <Style x:Key="NodeStyle" TargetType="ywpf:NodeControl">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type model:ModelNode}">
                    <DataTemplate.Resources>
                        <networkMonitoring:NodeKindToTemplateConverter x:Key="Converter"/>
                    </DataTemplate.Resources>
                    <Canvas Width="50" Height="50">
                        <!-- Main image for the node -->
                        <ContentPresenter Width="50" Height="50" ContentTemplate="{Binding Kind, Converter={StaticResource Converter}}" Name="Image" />
                        <!-- Exclamation mark icon if the node is broken -->
                        <ToggleButton Canvas.Left="30" Canvas.Top="22" IsChecked="{Binding Failed}" Visibility="Collapsed" Name="ExclamationMark" Cursor="Hand">
                            <ToggleButton.ToolTip>
                                <ToolTip Content="{Binding Name}" ContentStringFormat="Repair {0}"/>
                            </ToggleButton.ToolTip>

                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <ContentPresenter Width="20" Height="20" ContentTemplate="{StaticResource ExclamationMarkTemplate}"/>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                    </Canvas>

                    <DataTemplate.Triggers>
                        <!-- Render the node in grayscale when it is disabled. -->
                        <DataTrigger Binding="{Binding Enabled}" Value="False">
                            <Setter TargetName="Image" Property="Opacity" Value="0.5"/>
                        </DataTrigger>
                        <!-- Render the node in grayscale and an exclamation mark when it's broken. -->
                        <DataTrigger Binding="{Binding Failed}" Value="True">
                            <Setter TargetName="Image" Property="Opacity" Value="0.5"/>
                            <Setter TargetName="ExclamationMark" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for edges. This includes an animation when packets move across the edge. -->
    <Style x:Key="EdgeStyle" TargetType="ywpf:EdgeSegmentControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ywpf:EdgeSegmentControl">
                    <ContentPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type model:ModelEdge}">
                    <Grid Margin="9,-3,9,-3" ClipToBounds="False" Name="Grid">
                        <Grid.Resources>
                            <networkMonitoring:LoadToBrushConverter x:Key="Converter"/>
                            <Style x:Key="PacketStyle" TargetType="Ellipse">
                                <Setter Property="Stroke" Value="Black"/>
                                <Setter Property="Fill" Value="Black"/>
                                <Setter Property="Width" Value="14"/>
                                <Setter Property="Height" Value="14"/>
                                <Setter Property="Visibility" Value="Hidden"/>
                            </Style>
                        </Grid.Resources>

                        <!-- The actual edge -->
                        <Rectangle x:Name="Edge" RadiusX="4.5" RadiusY="4.5" Fill="{Binding Load, Converter={StaticResource Converter}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Rectangle.ToolTip>
                                <ToolTip Content="{Binding Load}" ContentStringFormat="Load: {0:P1}"/>
                            </Rectangle.ToolTip>
                        </Rectangle>

                        <!-- The packet lines -->
                        <Canvas IsHitTestVisible="False" HorizontalAlignment="Left" Width="{Binding ElementName=Grid, Path=ActualWidth}" Name="Packages">
                            <Ellipse x:Name="Forward" Style="{StaticResource PacketStyle}">
                                <Ellipse.RenderTransform>
                                    <TranslateTransform x:Name="ForwardTransform" X="{Binding ElementName=Grid, Path=ActualWidth}" Y="-3.5"/>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                            <Ellipse x:Name="Backward" Style="{StaticResource PacketStyle}">
                                <Ellipse.RenderTransform>
                                    <TranslateTransform x:Name="BackwardTransform" X="{Binding ElementName=Grid, Path=ActualWidth}" Y="-3.5"/>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Canvas>
                    </Grid>

                    <DataTemplate.Triggers>
                        <!-- Render the edge gray when disabled ... -->
                        <DataTrigger Binding="{Binding Enabled}" Value="False">
                            <Setter TargetName="Edge" Property="Fill" Value="LightGray"/>
                            <Setter TargetName="Edge" Property="ToolTip" Value="{x:Null}"/>
                            <Setter TargetName="Packages" Property="Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <!-- ... or broken. -->
                        <DataTrigger Binding="{Binding Failed}" Value="True">
                            <Setter TargetName="Edge" Property="Fill" Value="LightGray"/>
                            <Setter TargetName="Edge" Property="ToolTip" Value="{x:Null}"/>
                            <Setter TargetName="Packages" Property="Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <!-- Animation for a packet moving in the edge's direction. -->
                        <DataTrigger Binding="{Binding HasForwardPacket}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard FillBehavior="Stop">
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="Forward">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation From="0" Duration="0:0:1.4" Storyboard.TargetName="ForwardTransform" Storyboard.TargetProperty="X"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="Forward">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:1.4" Value="Hidden"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                        </DataTrigger>
                        <!-- Animation for a packet moving reverse to the edge's direction. -->
                        <DataTrigger Binding="{Binding HasBackwardPacket}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard FillBehavior="Stop">
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="Backward">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation To="0" Duration="0:0:1.4" Storyboard.TargetProperty="X" Storyboard.TargetName="BackwardTransform"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="Backward">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:1.4">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Hidden</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for the edge's label. The label is only for indicating brokenness. It is always attached and visible, but the exclamation mark
         is hidden unless the edge is broken. -->
    <Style x:Key="EdgeLabelStyle" TargetType="ywpf:LabelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ywpf:LabelControl">
                    <ContentPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type model:ModelEdge}">
                    <!-- Exclamation mark icon if the edge is broken -->
                    <ToggleButton IsChecked="{Binding Failed}" Visibility="Hidden" Name="ExclamationMark" Cursor="Hand" ToolTip="Repair connection">
                        <ToggleButton.Template>
                            <ControlTemplate TargetType="ToggleButton">
                                <ContentPresenter Width="20" Height="20" ContentTemplate="{StaticResource ExclamationMarkTemplate}"/>
                            </ControlTemplate>
                        </ToggleButton.Template>
                    </ToggleButton>

                    <DataTemplate.Triggers>
                        <!-- Show the exclamation mark icon if the edge is broken. -->
                        <DataTrigger Binding="{Binding Failed}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard TargetName="ExclamationMark">
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard TargetName="ExclamationMark">
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.2"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.2">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Hidden</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Fill color for the node label's background. This is used in the style decorator to render the speech bubble-like appearance as well. -->
    <SolidColorBrush x:Key="LabelBackground" Color="LightSkyBlue"/>

    <!-- The node label's style. This displays information about the node and also allows to manipulate it by turning nodes on or off. -->
    <Style x:Key="NodeLabelStyle" TargetType="ywpf:LabelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ywpf:LabelControl">
                    <Border Background="{StaticResource LabelBackground}" CornerRadius="5">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="model:ModelNode">
                    <Grid>
                        <Grid.Resources>
                            <networkMonitoring:LoadToBrushConverter x:Key="Converter"/>
                        </Grid.Resources>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Label Grid.Row="0" Grid.Column="0" Content="{Binding Name}" FontSize="14" Padding="2"/>
                        <Label Grid.Row="1" Grid.Column="0" Content="{Binding Ip}" FontSize="14" Padding="2"/>
                        <Ellipse Grid.Row="2" Grid.Column="0" x:Name="LoadIndicator" HorizontalAlignment="Left" Height="30" Width="30" Margin="4" Stroke="White" Fill="{Binding Load, Converter={StaticResource Converter}}">
                            <Ellipse.ToolTip>
                                <ToolTip Content="{Binding Load}" ContentStringFormat="Load: {0:P1}"/>
                            </Ellipse.ToolTip>
                        </Ellipse>
                        <ToggleButton Grid.Row="0" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Top" Width="15" Height="15" Margin="4" IsChecked="{Binding LabelVisible}" Cursor="Hand" ToolTip="Close">
                            <ToggleButton.Template>
                                <ControlTemplate>
                                    <Viewbox Stretch="Uniform">
                                        <Canvas Width="20" Height="20">
                                            <Ellipse Width="20" Height="20" Fill="#FF0078BD" />
                                            <Path Stroke="White" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" StrokeThickness="2" Data="M 5,5 L 15,15 M 15,5 L 5,15"/>
                                        </Canvas>
                                    </Viewbox>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <ToggleButton Name="PowerButton" Grid.Row="2" Grid.Column="1" HorizontalAlignment="Right" IsChecked="{Binding Enabled}" Margin="4" Cursor="Hand">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <Viewbox Stretch="Uniform">
                                        <Canvas Width="30" Height="30">
                                            <Path x:Name="Path" StrokeThickness="4" Stroke="#FFCC0000" StrokeStartLineCap="Round" StrokeEndLineCap="Round"
                                                  Data="M9 7 a 10 10 0 1 0 12 0 M15 4 L 15 14"/>
                                            <!-- Dummy circle that's clickable but invisible so that we have a more consistent hit-testing target.
                                                 Also used for the tooltip. -->
                                            <Ellipse x:Name="Ellipse" Canvas.Left="2"  Canvas.Top="2" Width="26" Height="26" Fill="Transparent">
                                                <Ellipse.ToolTip>
                                                    <ToolTip Content="{Binding Name}" ContentStringFormat="Turn off {0}"/>
                                                </Ellipse.ToolTip>
                                            </Ellipse>
                                        </Canvas>
                                    </Viewbox>

                                    <ControlTemplate.Triggers>
                                        <DataTrigger Binding="{Binding Enabled}" Value="False">
                                            <DataTrigger.Setters>
                                                <Setter TargetName="Path" Property="Stroke" Value="Green"/>
                                                <Setter TargetName="Ellipse" Property="ToolTip">
                                                    <Setter.Value>
                                                        <ToolTip Content="{Binding Name}" ContentStringFormat="Turn on {0}"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger.Setters>
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <ToggleButton Name="ResetButton" Grid.Row="2" Grid.Column="1" HorizontalAlignment="Right" IsChecked="{Binding Failed}" Margin="4" Cursor="Hand" Visibility="Collapsed">
                            <ToggleButton.ToolTip>
                                <ToolTip Content="{Binding Name}" ContentStringFormat="Repair {0}"/>
                            </ToggleButton.ToolTip>
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <Viewbox Stretch="Uniform">
                                        <Canvas Width="30" Height="30">
                                            <Path Fill="Green" StrokeThickness="4" Data="M 14.34375 2.25 C 14.034607 2.2651884 13.714905 2.30585 13.40625 2.34375 C 11.760092 2.54585 10.146819 3.0589 8.625 3.9375 C 7.7168703 4.4611 7.3514012 5.7794 7.875 6.6875 C 8.3985987 7.5956 9.7168703 7.92985 10.625 7.40625 C 14.840135 4.97255 20.160141 6.4099 22.59375 10.625 C 23.401637 12.024306 23.783755 13.598694 23.75 15.1875 L 22.75 14.875 L 24.1875 21.40625 L 29.15625 16.90625 L 27.6875 16.4375 C 27.990196 13.741909 27.435395 11.002925 26.0625 8.625 C 23.591375 4.3448438 18.980896 2.0221747 14.34375 2.25 z M 5.8125 8.59375 L 0.84375 13.09375 L 2.3125 13.5625 C 2.0098036 16.258091 2.5646054 18.997075 3.9375 21.375 C 6.573367 25.9405 11.655275 28.26265 16.59375 27.65625 C 18.239908 27.45415 19.853181 26.9411 21.375 26.0625 C 22.28313 25.5389 22.648599 24.2206 22.125 23.3125 C 21.601402 22.4044 20.28313 22.07015 19.375 22.59375 C 15.159865 25.02745 9.839859 23.5901 7.40625 19.375 C 6.5983632 17.975694 6.216245 16.401306 6.25 14.8125 L 7.25 15.125 L 5.8125 8.59375 z"/>
                                            <!-- Dummy circle that's clickable but invisible so that we have a more consistent hit-testing target. -->
                                            <Ellipse Canvas.Left="2"  Canvas.Top="2" Width="26" Height="26" Fill="Transparent"/>
                                        </Canvas>
                                    </Viewbox>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                    </Grid>

                    <DataTemplate.Triggers>
                        <!-- Turn the load indicator gray when the node is disabled. -->
                        <DataTrigger Binding="{Binding Enabled}" Value="False">
                            <Setter TargetName="LoadIndicator" Property="ToolTip" Value="{x:Null}"/>
                            <Setter TargetName="LoadIndicator" Property="Fill" Value="LightGray"/>
                        </DataTrigger>
                        <!-- Do the same for the load indicator if the node is broken and additionally switch power and reset button. -->
                        <DataTrigger Binding="{Binding Failed}" Value="True">
                            <Setter TargetName="LoadIndicator" Property="ToolTip" Value="{x:Null}"/>
                            <Setter TargetName="LoadIndicator" Property="Fill" Value="LightGray"/>
                            <Setter TargetName="PowerButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="ResetButton" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>