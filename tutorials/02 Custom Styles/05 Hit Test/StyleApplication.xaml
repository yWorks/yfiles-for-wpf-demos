<!-- ************************************************************************ -->
<!-- This demo file is part of yFiles WPF 3.5.                           -->
<!-- Copyright (c) 2000-2022 by yWorks GmbH, Vor dem Kreuzberg 28,          -->
<!-- 72070 Tuebingen, Germany. All rights reserved.                           -->
<!--                                                                          -->
<!-- yFiles demo files exhibit yFiles WPF functionalities. Any redistribution  -->
<!-- of demo resource files, with or without modification, is not permitted.  -->
<!--                                                                          -->
<!-- Owners of a valid software license for a yFiles WPF version that this     -->
<!-- demo is shipped with are allowed to use the resource file as basis for   -->
<!-- their own yFiles WPF powered applications. Use of such programs is        -->
<!-- governed by the rights and conditions as set out in the yFiles WPF        -->
<!-- license agreement.                                                       -->
<!--                                                                          -->
<!-- THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED           -->
<!-- WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF     -->
<!-- MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN  -->
<!-- NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    -->
<!-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED -->
<!-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   -->
<!-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   -->
<!-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     -->
<!-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       -->
<!-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             -->
<!--                                                                          -->
<!-- ************************************************************************ -->
<Window x:Class="Tutorial.CustomStyles.SimpleCustomStyleForm"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:y="http://www.yworks.com/xml/yfiles-wpf/3.0/xaml"
    Title="Style Tutorial 05: Hit Test" Height="680" Width="950"
        Loaded="OnLoaded" >
    <HeaderedContentControl Style="{StaticResource DemoStyle}">
        <HeaderedContentControl.Header>
            <RichTextBox BorderThickness="0" IsReadOnly="True">
                <FlowDocument FontFamily="Segoe UI" FontSize="12">
                    <Paragraph>
                        <Run FontWeight="Bold">Description</Run>
                    </Paragraph>
                    <Paragraph>
                        This step shows how to override IsHit() and IsInBox() in NodeStyleBase&lt;TVisual&gt;.
                    </Paragraph>
                    <Paragraph>
                        IsHit() is used for mouse click detection. It should return true if the tested point is inside 
                    the node. IsHit() should take into account the imprecision radius specified in the CanvasContext 
                    (HitTestRadius).
                    </Paragraph>
                    <Paragraph>
                        IsInBox() is used for marquee detection. It should return true if the node intersects with the box 
                    to test or lies completely inside. Also it should be true if the tested box lies completely inside the node.
                    </Paragraph>
                    <Paragraph>
                        <Run FontWeight="Bold">Things to Try</Run>
                    </Paragraph>
                    <List>
                        <ListItem>
                            <Paragraph>Take a look at IsHit() and IsInBox().
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Click inside/outside a node to see when it gets selected. Click near the node to watch 
                    the effects of the HitTestRadius. Zooming out makes the HitTestRadius bigger.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Drag a marquee box to select a node. If you drag it inside the surrounding box of 
                    a node you will see the node doesn't get selected. Drag it near the node to watch 
                    the effects of the HitTestRadius.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Comment in the first line in IsInBox() so the implementation
                    in the base class is called and does the same thing again. The elliptical shape of the node 
                    won't be respected but the node will be treated as if it was rectangular (affects marquee selection).
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                        	<Paragraph>
                        		Please note that IsHit() is just implemented for the sake of completeness and performance here. The base class 
                        		implementation takes the result of GetOutline() for hit testing which calculates exactly the same thing, with the 
                                difference that GetOutline() needs to build a GeneralPath first which is more expensive than an effective 
                                implementation as shown in IsHit(). If GetOutline() is implemented correctly, IsHit() will 
                        		automatically return the correct result.
                        	</Paragraph>
                        </ListItem>
                    </List>
                    <Paragraph>
                        <Run FontWeight="Bold">Left to Do</Run>
                    </Paragraph>
                    <List>
                        <ListItem>
                            <Paragraph>Implement GetBounds(), so the drop shadow will be 
                    included in the bounds of the node.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Find a way to draw a well-performing drop shadow.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Draw edges from nodes to their labels.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Create a custom label style.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Create a custom edge style.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Create a custom port style for nodes.
                            </Paragraph>
                        </ListItem>
                    </List>
                </FlowDocument>
            </RichTextBox>
        </HeaderedContentControl.Header>
        <DockPanel Grid.Column="2">
        <Menu Name="menu" DockPanel.Dock="Top">
            <MenuItem Header="File">
                <MenuItem Header="Open" Command="Open" CommandTarget="{Binding ElementName=graphControl}"/>
                <MenuItem Header="Save" Command="SaveAs" CommandTarget="{Binding ElementName=graphControl}"/>
            </MenuItem>
            <MenuItem Header="View">
                <MenuItem Header="Zoom In" Command="IncreaseZoom" CommandTarget="{Binding ElementName=graphControl}"/>
                <MenuItem Header="Zoom Out" Command="DecreaseZoom" CommandTarget="{Binding ElementName=graphControl}"/>
                <MenuItem Header="Fit Content" Command="{x:Static y:GraphControl.FitGraphBoundsCommand}" CommandTarget="{Binding ElementName=graphControl}"/>
            </MenuItem>
        </Menu>
        <y:GraphControl Name="graphControl" FileOperationsEnabled="True"/>
    </DockPanel>
    </HeaderedContentControl>
</Window>
