<!-- ************************************************************************ -->
<!-- This demo file is part of yFiles WPF 3.6.                           -->
<!-- Copyright (c) 2000-2024 by yWorks GmbH, Vor dem Kreuzberg 28,          -->
<!-- 72070 Tuebingen, Germany. All rights reserved.                           -->
<!--                                                                          -->
<!-- yFiles demo files exhibit yFiles WPF functionalities. Any redistribution  -->
<!-- of demo resource files, with or without modification, is not permitted.  -->
<!--                                                                          -->
<!-- Owners of a valid software license for a yFiles WPF version that this     -->
<!-- demo is shipped with are allowed to use the resource file as basis for   -->
<!-- their own yFiles WPF powered applications. Use of such programs is        -->
<!-- governed by the rights and conditions as set out in the yFiles WPF        -->
<!-- license agreement.                                                       -->
<!--                                                                          -->
<!-- THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED           -->
<!-- WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF     -->
<!-- MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN  -->
<!-- NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    -->
<!-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED -->
<!-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   -->
<!-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   -->
<!-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     -->
<!-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       -->
<!-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             -->
<!--                                                                          -->
<!-- ************************************************************************ -->
<Window x:Class="Tutorial.CustomStyles.SimpleCustomStyleForm" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:y="http://www.yworks.com/xml/yfiles-wpf/3.0/xaml" Title="Style Tutorial 03: UpdateVisual and RenderDataCache" Height="680" Width="950" Loaded="OnLoaded">
    <HeaderedContentControl Style="{StaticResource DemoStyle}">
        <HeaderedContentControl.Header>
            <RichTextBox BorderThickness="0" IsReadOnly="True">
                <FlowDocument FontFamily="Segoe UI" FontSize="12">
                    <Paragraph>
                        <Run FontWeight="Bold">Description</Run>
                    </Paragraph>
                    <Paragraph>
                        This step shows how to implement high-performance rendering for nodes.
                    </Paragraph>
                    <Paragraph>
                        To do this you need to implement UpdateVisual() which is called when 
					the Container decides to update the visual representation of a node.
					In contrast to CreateVisual(), we try to re-use the old visual instead 
					of creating a new one.
                    </Paragraph>
                    <Paragraph>
                        The RenderDataCache class saves the relevant data for creating a visual.
					UpdateVisual() checks whether this data has changed. If it hasn't changed, 
					the old visual can be returned, otherwise the whole or part of the 
					visual has to be re-rendered.
                    </Paragraph>
                    <Paragraph>
                        With the "High-Performance Rendering" button, you can switch between the custom implementation
                    of UpdateVisual and the base implementation which simply calls CreateVisual().
                    </Paragraph>
                    <Paragraph>
                        Please note that the dropshadow is turned of in this demo as it would compromise the rendering performance. 
                        A well-performing drop-shadow is introduced later in this tutorial.
                    </Paragraph>
                    <Paragraph>
                        <Run FontWeight="Bold">Things to Try</Run>
                    </Paragraph>
                    <List>
                        <ListItem>
                            <Paragraph>Click "Animate Nodes" to see the performance of CreateVisual().
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Turn on "High-Performance Rendering" and click "Animate Nodes" to see the 
                                benefit of implementing UpdateVisual().
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                Take a look at MySimpleNodeStyle.UpdateVisual() and 
							MySimpleNodeStyle.CreateRenderDataCache() as well as 
							class RenderDataCache.
                            </Paragraph>
                        </ListItem>
                    </List>
                    <Paragraph>
                        <Run FontWeight="Bold">Left to Do</Run>
                    </Paragraph>
                    <List>
                        <ListItem>
                            <Paragraph>
                                Implement IsInside() and GetOutline(), so edges will end at the node instead the bounding box.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                Implement HitTest, so a node won't get selected when clicking 
							in the bounding box but not in the node itself.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                Implement GetBounds(), so the drop shadow will be 
							included in the bounds of the node.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                Find a way to draw a well-performing drop shadow.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                Draw edges from nodes to their labels.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                Create a custom label style.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                Create a custom edge style.
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                Create a custom port style for nodes.
                            </Paragraph>
                        </ListItem>
                    </List>
                </FlowDocument>
            </RichTextBox>
        </HeaderedContentControl.Header>
    	<DockPanel Grid.Column="2">
    		<Menu Name="menu" DockPanel.Dock="Top">
    			<MenuItem Header="File">
    				<MenuItem Header="Open" Command="Open" CommandTarget="{Binding ElementName=graphControl}" />
    				<MenuItem Header="Save" Command="SaveAs" CommandTarget="{Binding ElementName=graphControl}" />
    			</MenuItem>
    			<MenuItem Header="View">
    				<MenuItem Header="Zoom In" Command="IncreaseZoom" CommandTarget="{Binding ElementName=graphControl}" />
    				<MenuItem Header="Zoom Out" Command="DecreaseZoom" CommandTarget="{Binding ElementName=graphControl}" />
    				<MenuItem Header="Fit Content" Command="{x:Static y:GraphControl.FitGraphBoundsCommand}" CommandTarget="{Binding ElementName=graphControl}" />
    			</MenuItem>
    		</Menu>
    		<ToolBarTray DockPanel.Dock="Top">
    			<ToolBar>
                    <CheckBox x:Name="performanceCheckBox" Content="High-Performance Rendering" Checked="performanceCheckBox_Click" Unchecked="performanceCheckBox_Click" IsThreeState="False" />
    				<Separator />
    				<Button Content="Animate Nodes" Click="Button_Click" />
    			</ToolBar>
    		</ToolBarTray>
    		<y:GraphControl Name="graphControl" FileOperationsEnabled="True" />
    	</DockPanel>
    </HeaderedContentControl>
</Window>